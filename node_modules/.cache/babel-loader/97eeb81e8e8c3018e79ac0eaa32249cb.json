{"ast":null,"code":"import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { BlogTypes as Types } from './Types';\nexport let BlogFetch;\n\n(function (_BlogFetch) {\n  const getPostList = _BlogFetch.getPostList = createAsyncThunk(Types.GET_POST_LIST, async () => {\n    const response = await fetch(Types.POST_API);\n    return response.json();\n  });\n  const postNewPost = _BlogFetch.postNewPost = createAsyncThunk(Types.POST_NEW_POST, async newPost => {\n    const response = await fetch(Types.POST_API, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newPost)\n    });\n    return response.json();\n  });\n  const deletePost = _BlogFetch.deletePost = createAsyncThunk(Types.DELETE_POST, async postID => {\n    const response = await fetch(Types.POST_API + `/${postID}`, {\n      method: 'DELETE'\n    });\n    return response.json();\n  });\n  const getSpecPost = _BlogFetch.getSpecPost = createAsyncThunk(Types.GET_SPEC_POST, async postID => {\n    const response = await fetch(Types.POST_API + `/${postID}?_embed=comments`);\n    return response.json();\n  });\n  const updateSpecPost = _BlogFetch.updateSpecPost = createAsyncThunk(Types.UPDATE_SPEC_POST, async post => {\n    const data = {\n      title: post.title,\n      body: post.body\n    };\n    const response = await fetch(Types.POST_API + `/${post.id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n    return response.json();\n  });\n  const postComment = _BlogFetch.postComment = createAsyncThunk(Types.POST_NEW_COMMENT, async newComment => {\n    const response = await fetch(Types.COMMENT_API, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newComment)\n    });\n    return response.json();\n  });\n})(BlogFetch || (BlogFetch = {}));","map":{"version":3,"names":["createAsyncThunk","BlogTypes","Types","getPostList","GET_POST_LIST","response","fetch","POST_API","json","postNewPost","POST_NEW_POST","newPost","method","headers","body","JSON","stringify","deletePost","DELETE_POST","postID","getSpecPost","GET_SPEC_POST","updateSpecPost","UPDATE_SPEC_POST","post","data","title","id","postComment","POST_NEW_COMMENT","newComment","COMMENT_API","BlogFetch"],"sources":["/Users/maxryaguzov/home_porjects/currency_converter/src/utils/Tools.ts"],"sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit'\nimport { BlogTypes as Types } from './Types'\n\nexport namespace BlogFetch {\n    /*\n        GET POSTS\n    */\n    export const getPostList = createAsyncThunk(\n        Types.GET_POST_LIST,\n        async () => {\n            const response = await fetch(Types.POST_API)\n            return response.json()\n        }\n    )\n\n    /*\n        CREATE POST\n    */\n    export const postNewPost = createAsyncThunk(\n        Types.POST_NEW_POST,\n        async (newPost: Omit<Types.PostItem, 'id'>) => {\n            const response = await fetch(Types.POST_API, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(newPost),\n            })\n            return response.json()\n        }\n    )\n\n    /*\n        DELETE POST\n    */\n    export const deletePost = createAsyncThunk(\n        Types.DELETE_POST,\n        async (postID: string) => {\n            const response = await fetch(Types.POST_API + `/${postID}`, {\n                method: 'DELETE',\n            })\n            return response.json()\n        }\n    )\n\n    /*\n        GET SPECIFIC POST\n    */\n    export const getSpecPost = createAsyncThunk(\n        Types.GET_SPEC_POST,\n        async (postID: string) => {\n            const response = await fetch(\n                Types.POST_API + `/${postID}?_embed=comments`\n            )\n            return response.json()\n        }\n    )\n\n    /*\n        UPDATE SPECIFIC POST\n    */\n    export const updateSpecPost = createAsyncThunk(\n        Types.UPDATE_SPEC_POST,\n        async (post: Types.SpecPostItem) => {\n            const data: Omit<Types.SpecPostItem, 'id' | 'comments'> = {\n                title: post.title,\n                body: post.body,\n            }\n            const response = await fetch(Types.POST_API + `/${post.id}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(data),\n            })\n            return response.json()\n        }\n    )\n\n    /*\n        POST COMMENT\n    */\n    export const postComment = createAsyncThunk(\n        Types.POST_NEW_COMMENT,\n        async (newComment: Omit<Types.CommentItem, 'id'>) => {\n            const response = await fetch(Types.COMMENT_API, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(newComment),\n            })\n            return response.json()\n        }\n    )\n}\n"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,kBAAjC;AACA,SAASC,SAAS,IAAIC,KAAtB,QAAmC,SAAnC;AAEA;;;EAIW,MAAMC,WAAW,4BAAGH,gBAAgB,CACvCE,KAAK,CAACE,aADiC,EAEvC,YAAY;IACR,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACJ,KAAK,CAACK,QAAP,CAA5B;IACA,OAAOF,QAAQ,CAACG,IAAT,EAAP;EACH,CALsC,CAApC;EAWA,MAAMC,WAAW,4BAAGT,gBAAgB,CACvCE,KAAK,CAACQ,aADiC,EAEvC,MAAOC,OAAP,IAA+C;IAC3C,MAAMN,QAAQ,GAAG,MAAMC,KAAK,CAACJ,KAAK,CAACK,QAAP,EAAiB;MACzCK,MAAM,EAAE,MADiC;MAEzCC,OAAO,EAAE;QACL,gBAAgB;MADX,CAFgC;MAKzCC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,OAAf;IALmC,CAAjB,CAA5B;IAOA,OAAON,QAAQ,CAACG,IAAT,EAAP;EACH,CAXsC,CAApC;EAiBA,MAAMS,UAAU,2BAAGjB,gBAAgB,CACtCE,KAAK,CAACgB,WADgC,EAEtC,MAAOC,MAAP,IAA0B;IACtB,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAACJ,KAAK,CAACK,QAAN,GAAkB,IAAGY,MAAO,EAA7B,EAAgC;MACxDP,MAAM,EAAE;IADgD,CAAhC,CAA5B;IAGA,OAAOP,QAAQ,CAACG,IAAT,EAAP;EACH,CAPqC,CAAnC;EAaA,MAAMY,WAAW,4BAAGpB,gBAAgB,CACvCE,KAAK,CAACmB,aADiC,EAEvC,MAAOF,MAAP,IAA0B;IACtB,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CACxBJ,KAAK,CAACK,QAAN,GAAkB,IAAGY,MAAO,kBADJ,CAA5B;IAGA,OAAOd,QAAQ,CAACG,IAAT,EAAP;EACH,CAPsC,CAApC;EAaA,MAAMc,cAAc,+BAAGtB,gBAAgB,CAC1CE,KAAK,CAACqB,gBADoC,EAE1C,MAAOC,IAAP,IAAoC;IAChC,MAAMC,IAAiD,GAAG;MACtDC,KAAK,EAAEF,IAAI,CAACE,KAD0C;MAEtDZ,IAAI,EAAEU,IAAI,CAACV;IAF2C,CAA1D;IAIA,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAACJ,KAAK,CAACK,QAAN,GAAkB,IAAGiB,IAAI,CAACG,EAAG,EAA9B,EAAiC;MACzDf,MAAM,EAAE,KADiD;MAEzDC,OAAO,EAAE;QACL,gBAAgB;MADX,CAFgD;MAKzDC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeS,IAAf;IALmD,CAAjC,CAA5B;IAOA,OAAOpB,QAAQ,CAACG,IAAT,EAAP;EACH,CAfyC,CAAvC;EAqBA,MAAMoB,WAAW,4BAAG5B,gBAAgB,CACvCE,KAAK,CAAC2B,gBADiC,EAEvC,MAAOC,UAAP,IAAqD;IACjD,MAAMzB,QAAQ,GAAG,MAAMC,KAAK,CAACJ,KAAK,CAAC6B,WAAP,EAAoB;MAC5CnB,MAAM,EAAE,MADoC;MAE5CC,OAAO,EAAE;QACL,gBAAgB;MADX,CAFmC;MAK5CC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAec,UAAf;IALsC,CAApB,CAA5B;IAOA,OAAOzB,QAAQ,CAACG,IAAT,EAAP;EACH,CAXsC,CAApC;GA/EMwB,S,KAAAA,S"},"metadata":{},"sourceType":"module"}