{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { BlogTypes as Types } from '../../utils/Types';\nimport { BlogFetch as Fetch } from '../../utils/Tools';\nconst initialState = {\n  postList: [],\n  loading: Types.LoadingType.idle\n};\nexport const postList = createSlice({\n  name: Types.POST_LIST,\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder // start getting the post list\n    .addCase(Fetch.getPostList.pending, state => {\n      state.loading = Types.LoadingType.pending;\n    }) // get all posts\n    .addCase(Fetch.getPostList.fulfilled, (state, action) => {\n      state.loading = Types.LoadingType.succeeded;\n      state.postList = [...action.payload];\n    }) // push new post\n    .addCase(Fetch.postNewPost.fulfilled, state => {}) // delete post\n    .addCase(Fetch.deletePost.fulfilled, () => {});\n  }\n});\nexport default postList.reducer;","map":{"version":3,"names":["createSlice","BlogTypes","Types","BlogFetch","Fetch","initialState","postList","loading","LoadingType","idle","name","POST_LIST","reducers","extraReducers","builder","addCase","getPostList","pending","state","fulfilled","action","succeeded","payload","postNewPost","deletePost","reducer"],"sources":["/Users/maxryaguzov/home_porjects/currency_converter/src/app/reducers/postList.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { BlogTypes as Types } from '../../utils/Types'\nimport { BlogFetch as Fetch } from '../../utils/Tools'\n\nconst initialState: Types.PostListState = {\n    postList: [],\n    loading: Types.LoadingType.idle,\n}\n\nexport const postList = createSlice({\n    name: Types.POST_LIST,\n    initialState,\n    reducers: {},\n    extraReducers: (builder) => {\n        builder\n            // start getting the post list\n            .addCase(Fetch.getPostList.pending, (state) => {\n                state.loading = Types.LoadingType.pending\n            })\n            // get all posts\n            .addCase(\n                Fetch.getPostList.fulfilled,\n                (state, action: PayloadAction<Types.PostList>) => {\n                    state.loading = Types.LoadingType.succeeded\n                    state.postList = [...action.payload]\n                }\n            )\n            // push new post\n            .addCase(Fetch.postNewPost.fulfilled, (state) => {})\n            // delete post\n            .addCase(Fetch.deletePost.fulfilled, () => {})\n    },\n})\n\nexport default postList.reducer\n"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AACA,SAASC,SAAS,IAAIC,KAAtB,QAAmC,mBAAnC;AACA,SAASC,SAAS,IAAIC,KAAtB,QAAmC,mBAAnC;AAEA,MAAMC,YAAiC,GAAG;EACtCC,QAAQ,EAAE,EAD4B;EAEtCC,OAAO,EAAEL,KAAK,CAACM,WAAN,CAAkBC;AAFW,CAA1C;AAKA,OAAO,MAAMH,QAAQ,GAAGN,WAAW,CAAC;EAChCU,IAAI,EAAER,KAAK,CAACS,SADoB;EAEhCN,YAFgC;EAGhCO,QAAQ,EAAE,EAHsB;EAIhCC,aAAa,EAAGC,OAAD,IAAa;IACxBA,OAAO,CACH;IADG,CAEFC,OAFL,CAEaX,KAAK,CAACY,WAAN,CAAkBC,OAF/B,EAEyCC,KAAD,IAAW;MAC3CA,KAAK,CAACX,OAAN,GAAgBL,KAAK,CAACM,WAAN,CAAkBS,OAAlC;IACH,CAJL,EAKI;IALJ,CAMKF,OANL,CAOQX,KAAK,CAACY,WAAN,CAAkBG,SAP1B,EAQQ,CAACD,KAAD,EAAQE,MAAR,KAAkD;MAC9CF,KAAK,CAACX,OAAN,GAAgBL,KAAK,CAACM,WAAN,CAAkBa,SAAlC;MACAH,KAAK,CAACZ,QAAN,GAAiB,CAAC,GAAGc,MAAM,CAACE,OAAX,CAAjB;IACH,CAXT,EAaI;IAbJ,CAcKP,OAdL,CAcaX,KAAK,CAACmB,WAAN,CAAkBJ,SAd/B,EAc2CD,KAAD,IAAW,CAAE,CAdvD,EAeI;IAfJ,CAgBKH,OAhBL,CAgBaX,KAAK,CAACoB,UAAN,CAAiBL,SAhB9B,EAgByC,MAAM,CAAE,CAhBjD;EAiBH;AAtB+B,CAAD,CAA5B;AAyBP,eAAeb,QAAQ,CAACmB,OAAxB"},"metadata":{},"sourceType":"module"}