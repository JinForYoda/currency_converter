{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { BlogTypes as Types } from '../../utils/Types';\nimport { BlogFetch as Fetch } from '../../utils/Tools';\nconst initialState = {\n  post: {\n    id: '',\n    title: '',\n    body: '',\n    comments: []\n  },\n  loading: Types.LoadingType.idle\n};\nexport const specPost = createSlice({\n  name: Types.SPEC_POST,\n  initialState,\n  reducers: {\n    cleanSpecPost: state => {\n      state.post = {\n        id: '',\n        title: '',\n        body: '',\n        comments: []\n      };\n    }\n  },\n  extraReducers: builder => {\n    builder // start getting the post data\n    .addCase(Fetch.getSpecPost.pending, state => {\n      state.loading = Types.LoadingType.pending;\n    }) // get post\n    .addCase(Fetch.getSpecPost.fulfilled, (state, action) => {\n      state.loading = Types.LoadingType.succeeded;\n      state.post = {\n        id: action.payload.id,\n        title: action.payload.title,\n        body: action.payload.body,\n        comments: action.payload.comments\n      };\n    }) // update post data\n    .addCase(Fetch.updateSpecPost.fulfilled, (state, action) => {\n      state.post = {\n        id: action.payload.id,\n        title: action.payload.title,\n        body: action.payload.body,\n        comments: action.payload.comments || []\n      };\n    }) // push comment\n    .addCase(Fetch.postComment.fulfilled, (state, action) => {\n      state.post.comments.push(action.payload);\n    });\n  }\n});\nexport const {\n  cleanSpecPost\n} = specPost.actions;\nexport default specPost.reducer;","map":{"version":3,"names":["createSlice","BlogTypes","Types","BlogFetch","Fetch","initialState","post","id","title","body","comments","loading","LoadingType","idle","specPost","name","SPEC_POST","reducers","cleanSpecPost","state","extraReducers","builder","addCase","getSpecPost","pending","fulfilled","action","succeeded","payload","updateSpecPost","postComment","push","actions","reducer"],"sources":["/Users/maxryaguzov/home_porjects/currency_converter/src/app/reducers/specPost.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { BlogTypes as Types } from '../../utils/Types'\nimport { BlogFetch as Fetch } from '../../utils/Tools'\n\nconst initialState: Types.SpecPostState = {\n    post: {\n        id: '',\n        title: '',\n        body: '',\n        comments: [],\n    },\n    loading: Types.LoadingType.idle,\n}\n\nexport const specPost = createSlice({\n    name: Types.SPEC_POST,\n    initialState,\n    reducers: {\n        cleanSpecPost: (state) => {\n            state.post = { id: '', title: '', body: '', comments: [] }\n        },\n    },\n    extraReducers: (builder) => {\n        builder\n            // start getting the post data\n            .addCase(Fetch.getSpecPost.pending, (state) => {\n                state.loading = Types.LoadingType.pending\n            })\n            // get post\n            .addCase(\n                Fetch.getSpecPost.fulfilled,\n                (state, action: PayloadAction<Types.SpecPostItem>) => {\n                    state.loading = Types.LoadingType.succeeded\n                    state.post = {\n                        id: action.payload.id,\n                        title: action.payload.title,\n                        body: action.payload.body,\n                        comments: action.payload.comments,\n                    }\n                }\n            )\n            // update post data\n            .addCase(\n                Fetch.updateSpecPost.fulfilled,\n                (state, action: PayloadAction<Types.SpecPostItem>) => {\n                    state.post = {\n                        id: action.payload.id,\n                        title: action.payload.title,\n                        body: action.payload.body,\n                        comments: action.payload.comments || [],\n                    }\n                }\n            )\n            // push comment\n            .addCase(\n                Fetch.postComment.fulfilled,\n                (state, action: PayloadAction<Types.CommentItem>) => {\n                    state.post.comments.push(action.payload)\n                }\n            )\n    },\n})\n\nexport const { cleanSpecPost } = specPost.actions\nexport default specPost.reducer\n"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AACA,SAASC,SAAS,IAAIC,KAAtB,QAAmC,mBAAnC;AACA,SAASC,SAAS,IAAIC,KAAtB,QAAmC,mBAAnC;AAEA,MAAMC,YAAiC,GAAG;EACtCC,IAAI,EAAE;IACFC,EAAE,EAAE,EADF;IAEFC,KAAK,EAAE,EAFL;IAGFC,IAAI,EAAE,EAHJ;IAIFC,QAAQ,EAAE;EAJR,CADgC;EAOtCC,OAAO,EAAET,KAAK,CAACU,WAAN,CAAkBC;AAPW,CAA1C;AAUA,OAAO,MAAMC,QAAQ,GAAGd,WAAW,CAAC;EAChCe,IAAI,EAAEb,KAAK,CAACc,SADoB;EAEhCX,YAFgC;EAGhCY,QAAQ,EAAE;IACNC,aAAa,EAAGC,KAAD,IAAW;MACtBA,KAAK,CAACb,IAAN,GAAa;QAAEC,EAAE,EAAE,EAAN;QAAUC,KAAK,EAAE,EAAjB;QAAqBC,IAAI,EAAE,EAA3B;QAA+BC,QAAQ,EAAE;MAAzC,CAAb;IACH;EAHK,CAHsB;EAQhCU,aAAa,EAAGC,OAAD,IAAa;IACxBA,OAAO,CACH;IADG,CAEFC,OAFL,CAEalB,KAAK,CAACmB,WAAN,CAAkBC,OAF/B,EAEyCL,KAAD,IAAW;MAC3CA,KAAK,CAACR,OAAN,GAAgBT,KAAK,CAACU,WAAN,CAAkBY,OAAlC;IACH,CAJL,EAKI;IALJ,CAMKF,OANL,CAOQlB,KAAK,CAACmB,WAAN,CAAkBE,SAP1B,EAQQ,CAACN,KAAD,EAAQO,MAAR,KAAsD;MAClDP,KAAK,CAACR,OAAN,GAAgBT,KAAK,CAACU,WAAN,CAAkBe,SAAlC;MACAR,KAAK,CAACb,IAAN,GAAa;QACTC,EAAE,EAAEmB,MAAM,CAACE,OAAP,CAAerB,EADV;QAETC,KAAK,EAAEkB,MAAM,CAACE,OAAP,CAAepB,KAFb;QAGTC,IAAI,EAAEiB,MAAM,CAACE,OAAP,CAAenB,IAHZ;QAITC,QAAQ,EAAEgB,MAAM,CAACE,OAAP,CAAelB;MAJhB,CAAb;IAMH,CAhBT,EAkBI;IAlBJ,CAmBKY,OAnBL,CAoBQlB,KAAK,CAACyB,cAAN,CAAqBJ,SApB7B,EAqBQ,CAACN,KAAD,EAAQO,MAAR,KAAsD;MAClDP,KAAK,CAACb,IAAN,GAAa;QACTC,EAAE,EAAEmB,MAAM,CAACE,OAAP,CAAerB,EADV;QAETC,KAAK,EAAEkB,MAAM,CAACE,OAAP,CAAepB,KAFb;QAGTC,IAAI,EAAEiB,MAAM,CAACE,OAAP,CAAenB,IAHZ;QAITC,QAAQ,EAAEgB,MAAM,CAACE,OAAP,CAAelB,QAAf,IAA2B;MAJ5B,CAAb;IAMH,CA5BT,EA8BI;IA9BJ,CA+BKY,OA/BL,CAgCQlB,KAAK,CAAC0B,WAAN,CAAkBL,SAhC1B,EAiCQ,CAACN,KAAD,EAAQO,MAAR,KAAqD;MACjDP,KAAK,CAACb,IAAN,CAAWI,QAAX,CAAoBqB,IAApB,CAAyBL,MAAM,CAACE,OAAhC;IACH,CAnCT;EAqCH;AA9C+B,CAAD,CAA5B;AAiDP,OAAO,MAAM;EAAEV;AAAF,IAAoBJ,QAAQ,CAACkB,OAAnC;AACP,eAAelB,QAAQ,CAACmB,OAAxB"},"metadata":{},"sourceType":"module"}